## MNIST 프로젝트 1 --> 0~9까지 손글씨를 훈련시켜서 구분하는 프로젝트
from sklearn.neighbors import KNeighborsClassifier # KNN 알고리즘 임포트
from sklearn import metrics, utils
import pandas as pd

# === 데이터준비 ===
# 0. 데이터를 준비한다. --> 통 150건_학습용과 테스트용
df = pd.read_csv('./train_60k/train_60k.csv') # 28x28 크기의 RAW데이터
df = utils.shuffle(df) #셔플 시키기(섞는게 좋음)
# 1. 학습용 80%, 테스트용 20%
dataLen = df.shape[0] # 데이터 개수
trainSize = int(dataLen * 0.8)
trainSize = dataLen - trainSize
train_data = df.iloc[0:trainSize, 1:] # 문제수 0~ 80%, 답지 0~ 전부
train_label = df.iloc[0:trainSize, [0]] # 문제수 0~ 80%, 답은 1개
test_data = df.iloc[trainSize:, 1:] # 문제수 train~ 전부
test_label = df.iloc[trainSize:, [0]] # 문제수 train~ 전부

# 2. 머신러닝 알고리즘을 선택 (KNN, SVN ... 딥러닝 알고리즘)
clf = KNeighborsClassifier(n_neighbors=3)
# 훈련시키기
# 3. 학습(훈련) 시키기 --> 오래걸림 (실제로는 AWS나 클라우드 써야 됨) --> 모델(Model)이 완성
clf.fit(train_data, train_label)

# 4. 모델의 정답률 구하기 (모의고사 시험)
results = clf.predict(test_data)
score = metrics.accuracy_score(results, test_label)
print("정답률 : %5.2f(score)" %(score))

# *** 모델 저장하기
import joblib
## 덤프파일 만들기.
joblib.dump(clf, "mnist_knn3_60k.dmp")

# 활용
# # --. 데이터 예측
# myNum = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,18,18,18,126,136,175,26,166,255,247,127,0,0,0,0,0,0,0,0,0,0,0,0,30,36,94,154,170,253,253,253,253,253,225,172,253,242,195,64,0,0,0,0,0,0,0,0,0,0,0,49,238,253,253,253,253,253,253,253,253,251,93,82,82,56,39,0,0,0,0,0,0,0,0,0,0,0,0,18,219,253,253,253,253,253,198,182,247,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,156,107,253,253,205,11,0,43,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,1,154,253,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,253,190,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,190,253,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,241,225,160,108,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,240,253,253,119,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,186,253,253,150,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,93,252,253,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,253,249,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,130,183,253,253,207,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,148,229,253,253,253,250,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,114,221,253,253,253,253,201,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,66,213,253,253,253,253,198,81,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,171,219,253,253,253,253,195,80,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,172,226,253,253,253,253,244,133,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,253,253,253,212,135,132,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
# result = clf.predict([myNum])
# print('이 숫자는 -->', result, '입니다. 단,', score * 100, '%의 확률입니다.')